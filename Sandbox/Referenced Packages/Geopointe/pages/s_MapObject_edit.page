<apex:page controller="geopointe.s_MapObject" extensions="geopointe.FieldSelectorRemotes" tabStyle="Geopointe_Setup__tab" sidebar="false" title="Geopointe - Map Object - {!IF(selectedEntity != '',selectedEntity,'New')}">

	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/ui/css/smoothness/jquery-ui-1.9.2.custom.min.css')}"/> <!-- jQuery UI CSS -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/fieldSelector/css/fieldselector.css')}"/> <!-- FieldSelector plugin CSS -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/css/common/common.css')}"/> <!-- Common geopointe CSS -->
	
	<apex:includeScript value="{!URLFOR($Page.geopointe__translations)}"/> <!-- Geopointe translations -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/jquery-1.8.3.min.js')}" /> <!-- core jQuery -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/ui/js/jquery-ui-1.9.2.custom.min.js')}" /> <!-- jQuery UI -->
    <apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/fieldSelector/jquery.fieldselector.js')}"/> <!-- fieldSelector plugin -->
	<apex:includeScript value="{!$Resource.geopointe__GeopointeJS}" /> <!-- Geopointe universal functions -->
	<apex:includeScript value="{!$Page.geopointe__js_GA}" /> <!-- Google Analytics -->	
	<c:walkMeSnippet />
	
	<!--Style to hide input fields that send data to controller -->
	<style>
		.CSObjectValue{
			display: none;
		}
		.CSObjectPathValue{
			display: none;
		}
	</style>
	
	<apex:sectionHeader title="Geopointe" subtitle="New Map Object" rendered="{! NOT(hasSelectedEntity) }"/>
	<apex:sectionHeader title="Geopointe" subtitle="Edit Map Object: {!selectedEntity}" rendered="{! hasSelectedEntity }"/>
	<apex:form >
		<apex:outputPanel id="breadcrumbDIV" layout="block" style="font-size: 8pt; margin: 0 0 3px 0;" >
			<apex:commandLink value="Â« Back to Geopointe Setup" action="{!return_MapConfig}" />
		</apex:outputPanel>
		
		<div id="modalWrapper">
		<apex:pageBlock id="pentity">
			
			<apex:pagemessages />
			
			<apex:pageblockbuttons >
				<apex:commandButton action="{!save}" value="Save" rerender="pentity" rendered="{! (hasSelectedEntity && isGeoCodeSetup && addrLocationSelection = 'self' && showNoLeadContactMessage == false) || (selectedEntity!='' && addrLocationSelection = 'ref')}"  onclick="geopointeAjaxStart('#modalWrapper','Saving...');" oncomplete="geopointeAjaxEnd(); createFieldSelectors();"/>
				<apex:commandButton action="{!cancel}" value="Cancel"/>
			</apex:pageblockbuttons>
			
			<apex:pageBlockSection title="States" columns="1" rendered="false">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="hasSelectedEntity"/>
					<apex:outputText value="{! hasSelectedEntity }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="SelectedEntity"/>
					<apex:outputText value="{! SelectedEntity }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="moContext"/>
					<apex:outputText value="{! moContext }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="isGeoCodeSetup"/>
					<apex:outputText value="{! isGeoCodeSetup }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="addrLocationSelection"/>
					<apex:outputText value="{! addrLocationSelection }"/>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			
			<apex:pageBlockSection rendered="{!moContext = 'new'}" title="Select a Salesforce Object for Mapping" collapsible="false" columns="1">
				
				<apex:outputPanel style="margin: 0 0 0 25px;">
					<apex:selectList value="{!SelectedEntity}" multiselect="false" size="1" disabled="{!hasSelectedEntity}">
						<apex:selectOptions value="{!LEntities}"/>
						<apex:actionSupport event="onchange"  action="{!setupCSObjects}" rerender="pentity,script" onsubmit="geopointeAjaxStart('#modalWrapper','Loading Object...',95);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();"/>
					</apex:selectList>
					<apex:outputPanel rendered="{!hasSelectedEntity && isGeoCodeSetup && addrLocationSelection = 'self'}" >
						&nbsp;<apex:inputCheckbox value="{!initGeocodeJob}"/>&nbsp;<b>Geocode this object upon successful Save</b>
					</apex:outputPanel>
				</apex:outputPanel>
				
			</apex:pageBlockSection>

			<apex:pageBlockSection title="Campaign Member Setup" rendered="{!selectedEntity == 'campaignmember'}" collapsible="false" columns="1">

				<apex:pageMessage severity="warning" strength="2" summary="
					Mapping Campaign members requires special setup instructions. Please refer to this support page for mapping Campaign Members:<br/><br/>
					<a style='font-size: 12px; color: #015BA7' href='http://support.arrowpointe.com/map-campaign-members' target='_blank'>http://support.arrowpointe.com/map-campaign-members</a>
				"  escape="false"/>

				<apex:pageMessage severity="error" strength="2" rendered="{!showNoLeadContactMessage}" summary="To map Campaign Members you must first create an active Map Object for Leads or Contacts but typically both."/>
					
			</apex:pageBlockSection>

			<apex:pageBlockSection title="Define The Way This Map Object is Configured" collapsible="false" columns="1" rendered="{!AND(hasSelectedEntity, showNoLeadContactMessage == false)}">
				
				<apex:pageBlockSectionItem >
					<apex:outputPanel >
						<b>Setup Type</b>
						<div style="font-weight:normal;">{!SetupTypeHelp}</div>
					</apex:outputPanel>
					<apex:outputPanel >
						<apex:selectRadio style="margin: 0 0 0 25px; width: 600px;" value="{!addrLocationSelection}" >
							<apex:selectOption itemValue="self" itemLabel="Define This Map Object"/>
							<apex:selectOption itemValue="ref" itemLabel="Use Another Map Object"/>
							<apex:actionSupport event="onchange" action="{!handleAddrLocationSelection}" onsubmit="geopointeAjaxStart('#modalWrapper','Loading...',208);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();" rerender="pentity" status="locationSelection"/>
						</apex:selectRadio>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				
			</apex:pageBlockSection>				
			
			<apex:pageBlockSection rendered="{! addrLocationSelection = 'self' && hasSelectedEntity && NOT(isGeoCodeSetup)}" collapsible="false" columns="1">   
				<apex:pagemessage title="A Geocode 'Lookup' field is required for this Object" severity="warning" strength="1" > 
					<p>If you are not referring to another Map Object, Geopointe requires the {!selectedEntity} object to have a custom lookup field pointing to the 
					"Geocode" object that comes with Geopointe.</p>
					
					<p>To do this, configure this object in Setup and add a new field of type "Lookup Relationship" and have it point to the Geocode Object.
					See this support page for more detail: <b><a href="http://support.arrowpointe.com/setting-up-a-custom-object" target="_blank" style="color: #015BA7">Setting up a Custom Object</a></b>.
					</p>
					
					<p>Group and Professional Edition customers need to also put this field on the object's Page Layout.</p>
					
					<p>Once you do this, come back here and configure the Map Object.</p>
				</apex:pagemessage>
			</apex:pageBlockSection>
		
			<apex:outputPanel id="CSList" rendered="{!hasSelectedEntity}" html-data-asdfadsf="">		
				
				<apex:outputPanel rendered="{!isGeoCodeSetup && addrLocationSelection=='self' && showNoLeadContactMessage == false}" >
					<apex:pageBlockSection title="Where should Geopointe look for information?" collapsible="false" columns="2">   
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!NameCSObject.name}</b>
								<div style="font-weight:normal;">{!NameCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( NameCSObject.pathvalue == NULL && NameCSObject.path == NULL,'Not Defined',NameCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!NameCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!NameCSObject.PathValue}" styleClass="CSObjectPathValue"/>                    
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a Name Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem rendered="{!selectedEntity != 'campaignmember'}">
							<apex:outputPanel >
								<b>{!LatCSObject.name}</b>
								<div style="font-weight:normal;">{!LatCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:outputPanel id="latitudeInfo">
									<span class="selectedFieldNameOutput">{!IF(LatCSObject.pathvalue==NULL && LatCSObject.path==NULL,'Not Defined',LatCSObject.value)}</span>&nbsp;
									<apex:inputText value="{!LatCSObject.value}" styleClass="CSObjectValue"/>
									<apex:inputText value="{!LatCSObject.PathValue}" styleClass="CSObjectPathValue"/>
									<a href="#" class="openFieldSelector" data-dialogTitle="Select a Latitude Field">[change]</a>&nbsp;
									<a href="#" class="clearLatLong">[clear]</a>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem rendered="{!selectedEntity == 'campaignmember'}"/>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!StreetCSObject.name}</b>
								<div style="font-weight:normal;">{!StreetCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StreetCSObject.pathvalue==NULL && StreetCSObject.path==NULL,'Not Defined',StreetCSObject.value)}</span>&nbsp;                 
								<apex:inputText value="{!StreetCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!StreetCSObject.PathValue}" styleClass="CSObjectPathValue"/>
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a Street Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem rendered="{!selectedEntity != 'campaignmember'}">
							<apex:outputPanel >
								<b>{!LongCSObject.name}</b>
								<div style="font-weight:normal;">{!LongCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:outputPanel id="longitudeInfo">
									<span class="selectedFieldNameOutput">{!IF(LongCSObject.pathvalue==NULL && LongCSObject.path==NULL,'Not Defined',LongCSObject.value)}</span>&nbsp;
									<apex:inputText value="{!LongCSObject.value}" styleClass="CSObjectValue"/>
									<apex:inputText value="{!LongCSObject.PathValue}" styleClass="CSObjectPathValue"/>
									<a href="#" class="openFieldSelector" data-dialogTitle="Select a Longitude Field">[change]</a>&nbsp;
									<a href="#" class="clearLatLong">[clear]</a>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem rendered="{!selectedEntity == 'campaignmember'}"/>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!CityCSObject.name}</b>
								<div style="font-weight:normal;">{!CityCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CityCSObject.pathvalue==NULL && CityCSObject.path==NULL,'Not Defined',CityCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CityCSObject.value}" styleClass="CSObjectValue"/>   
								<apex:inputText value="{!CityCSObject.PathValue}" styleClass="CSObjectPathValue"/>
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a City Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Geocode Batch Size</b>
								<div style="font-weight:normal;">Sets the batch size for the Geocoder on this object. 100 is the default. Lower this value if your system has triggers that require a smaller batch size.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!GeocodeBatchSize}" multiselect="false" size="1">
									<apex:selectOption itemValue="1" itemLabel="1"/>
									<apex:selectOption itemValue="2" itemLabel="2"/>
									<apex:selectOption itemValue="3" itemLabel="3"/>
									<apex:selectOption itemValue="4" itemLabel="4"/>
									<apex:selectOption itemValue="5" itemLabel="5"/>
									<apex:selectOption itemValue="10" itemLabel="10"/>
									<apex:selectOption itemValue="20" itemLabel="20"/>
									<apex:selectOption itemValue="30" itemLabel="30"/>
									<apex:selectOption itemValue="40" itemLabel="40"/>
									<apex:selectOption itemValue="50" itemLabel="50"/>
									<apex:selectOption itemValue="100" itemLabel="100"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!StateCSObject.name}</b>
								<div style="font-weight:normal;">{!StateCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StateCSObject.pathvalue==NULL && StateCSObject.path==NULL,'Not Defined',StateCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!StateCSObject.value}" styleClass="CSObjectValue"/>       
								<apex:inputText value="{!StateCSObject.PathValue}" styleClass="CSObjectPathValue"/>       
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a State Field">[change]</a>
							</apex:outputPanel> 
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
						</apex:pageBlockSectionItem>
												
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!ZipCSObject.name}</b>
								<div style="font-weight:normal;">{!ZipCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >								
								<span class="selectedFieldNameOutput">{!IF(ZipCSObject.pathvalue==NULL && ZipCSObject.path==NULL,'Not Defined',ZipCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!ZipCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!ZipCSObject.PathValue}" styleClass="CSObjectPathValue"/>         
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a Postal Code Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!CountryCSObject.name}</b>
								<div style="font-weight:normal;">{!CountryCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CountryCSObject.pathvalue==NULL && CountryCSObject.path==NULL,'Not Defined',CountryCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!CountryCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!CountryCSObject.PathValue}" styleClass="CSObjectPathValue"/>               
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a Country Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
							
					</apex:pageBlockSection>
					
					<apex:pageBlockSection title="Where should Geopointe populate Geocode results?" collapsible="false" columns="2">
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!GeoCSObject.name}</b>
								<div style="font-weight:normal;">{!GeocodeCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!GeoCSObject.value}" multiselect="false" size="1">
									<apex:selectOptions value="{!GeoFields}"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
					</apex:pageBlockSection>
	     
					<apex:pageBlockSection title="Advanced Options" collapsible="false" columns="1" rendered="{!selectedEntity != 'campaignmember'}">
					
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Map Object Filter</b>
								<div style="font-weight:normal;">A SOQL filter to limit the data that gets used in this Map Object. This filter will apply system-wide (geocoder, datasets, etc.)</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:inputText value="{!SOQLFilter}" size="125" maxlength="255"/>
								<apex:outputPanel layout="block" style="padding: 3px 0px;" rendered="{!SelectedEntity='lead'}">
									<apex:panelGrid columns="2">
										<apex:image url="{!URLFOR($Resource.geopointe__images, '/info.png')}"/>
										<apex:outputText value="A filter of 'IsConverted = False' is automatically applied to the Lead Map Object, so there is no need to include that here."/>
									</apex:panelGrid>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
					</apex:pageBlockSection>
					
				</apex:outputPanel>
				
				<apex:outputPanel rendered="{!addrLocationSelection=='ref'}">	
					<apex:pageBlockSection title="Where should Geopointe look for information?" collapsible="false" columns="2">   
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!NameCSObject.name}</b>
								<div style="font-weight:normal;">{!NameCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( NameCSObject.pathvalue == NULL && NameCSObject.path == NULL,'Not Defined',NameCSObject.value)}</span>&nbsp;     
								<apex:inputText value="{!NameCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!NameCSObject.PathValue}" styleClass="CSObjectPathValue"/>              
								<a href="#" class="openFieldSelector" data-dialogTitle="Select a Name Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Query Limit</b>
								<div style="font-weight:normal;">Defines the query limit that should be used for this Map Object when searching on the Map tab. "Auto" makes Geopointe dynamically determine the best limit. Change it to a hardcoded value if Auto is not sufficient for you.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!QueryLimit}" multiselect="false" size="1">
									<apex:selectOption itemValue="auto" itemLabel="Auto"/>
									<apex:selectOption itemValue="1000" itemLabel="1000"/>
									<apex:selectOption itemValue="2000" itemLabel="2000"/>
									<apex:selectOption itemValue="3000" itemLabel="3000"/>
									<apex:selectOption itemValue="4000" itemLabel="4000"/>
									<apex:selectOption itemValue="5000" itemLabel="5000"/>
									<apex:selectOption itemValue="6000" itemLabel="6000"/>
									<apex:selectOption itemValue="7000" itemLabel="7000"/>
									<apex:selectOption itemValue="8000" itemLabel="8000"/>
									<apex:selectOption itemValue="9000" itemLabel="9000"/>
									<apex:selectOption itemValue="10000" itemLabel="10000"/>
									<apex:selectOption itemValue="11000" itemLabel="11000"/>
									<apex:selectOption itemValue="12000" itemLabel="12000"/>
									<apex:selectOption itemValue="13000" itemLabel="13000"/>
									<apex:selectOption itemValue="14000" itemLabel="14000"/>
									<apex:selectOption itemValue="15000" itemLabel="15000"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Referenced Map Object</b>
								<div style="font-weight:normal;">{!RefMapObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!RefMapObject}" multiselect="false" size="1">
									<apex:selectOptions value="{!ReferencedMapObjects}"/>
									<apex:actionSupport event="onchange" action="{!handleAddrLocationSelection}" onsubmit="geopointeAjaxStart('#modalWrapper','Loading Fields...',208);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();" rerender="pentity"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Field Referring to the Map Object</b>
								<div style="font-weight:normal;">{!RefMapObjectRelationshipHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!RefMapObjectRelationship}" multiselect="false" size="1" rendered="{!RefMapObject!=''}">
									<apex:selectOptions value="{!ReferencedMapObjectRelationship}"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
					</apex:pageBlockSection>
				</apex:outputPanel>
			</apex:outputPanel>
		</apex:pageBlock>
		</div>
	</apex:form>

	<!-- Event Listeners -->
	<apex:outputPanel id="script">
		<script type="text/javascript">
			var selectedObject = '{!JSENCODE(selectedEntity)}';
		</script>		
	</apex:outputPanel>
	
	<style>
		body .geopointeAjaxModal{
			margin: 0 px;
		}
	
	</style>
	
	<script type="text/javascript">
		//Make jquery in no conflict mode
		var j$ = jQuery.noConflict();
		
		j$(document).ready(function(){			
			createFieldSelectors();
						
			//Event listner to clear the lat and long fields
			j$("body").on("click",".clearLatLong",function(e){
				
				//Update the hidden input field
				j$(this).prevAll("input").val('');
				
				//Update the displayed label
				j$(this).prevAll(".selectedFieldNameOutput").text('Not Defined');
				
				//Prevent normal hyperlink behavior
				e.preventDefault();
			});
		});
		
		function createFieldSelectors(){
			//Create event listener that will open the field selector
			j$(".openFieldSelector").fieldSelector({
				'isFilter' : false,
				'showAll': true,
				'onSelect': function(field){

					//Update the hidden input field for field nae
					j$(this).prevAll(".CSObjectValue").val(field.fullAPIName.toLowerCase());
					
					//Update the hidden input field for the object name of the selected field
					j$(this).prevAll(".CSObjectPathValue").val(field.objectName.toLowerCase());
					
					//Update the displayed label
					j$(this).prevAll(".selectedFieldNameOutput").text(field.fullAPIName.toLowerCase());
				},
				'startObject': selectedObject,
				'title': function(e){
					return e.attr("data-dialogTitle");
				},
				'getFieldsForObjectRemoteMethod': '{!$RemoteAction.FieldSelectorRemotes.getFieldsForObject}',
				'getChildObjectsRemoteMethod': '{!$RemoteAction.FieldSelectorRemotes.getChildObjects}',
				'getPicklistValuesRemoteMethod': '{!$RemoteAction.FieldSelectorRemotes.getPickListValues}'
			});
		}
	</script>
</apex:page>