<?xml version="1.0" encoding="UTF-8"?>
<HomePageComponent xmlns="http://soap.sforce.com/2006/04/metadata">
    <body>&lt;style type=&quot;text/css&quot;&gt;	.agentConsoleSkillListMenu {		border: 1px solid #CCCCCC;		border-radius: 5px;		display: none;		min-height: 10px;		min-width: 150px;				padding: 5px;		position: fixed;		background-color: #DDDDDD;		background: -webkit-linear-gradient(#FFFFFF, #DDDDDD);		background: -moz-linear-gradient(#FFFFFF, #DDDDDD);		background: -ms-linear-gradient(#FFFFFF, #DDDDDD);		background: -o-linear-gradient(#FFFFFF, #DDDDDD);		background: linear-gradient(#FFFFFF, #DDDDDD);		-ms-filter: &apos;progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#DDDDDD, GradientType=1)&apos;;		filter: progid:DXImageTransform.Microsoft.Gradient(StartColorStr=&apos;#FFFFFF&apos;, EndColorStr=&apos;#DDDDDD&apos;, GradientType=0);	}	.agentConsoleSkillListMenu .menuItem {		cursor: default;	    padding: 3px 0px 3px 0px;	}			.agentConsoleSkillListMenu .menuItem:hover {		background-color: #888888;		background: -webkit-linear-gradient(#AAAAAA, #888888);		background: -moz-linear-gradient(#AAAAAA, #888888);		background: -ms-linear-gradient(#AAAAAA, #888888);		background: -o-linear-gradient(#AAAAAA, #888888);		background: linear-gradient(#AAAAAA, #888888);        cursor: pointer;		filter: progid:DXImageTransform.Microsoft.Gradient(StartColorStr=&apos;#AAAAAA&apos;, EndColorStr=&apos;#888888&apos;, GradientType=0);		-ms-filter: &apos;progid:DXImageTransform.Microsoft.gradient(startColorstr=#AAAAAA, endColorstr=#888888, GradientType=1)&apos;;	}	&lt;/style&gt;&lt;div id=&quot;clickToDial&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    /*     * This script handles to ClickToDial events from Open CTI Framework. Skill List is provided by Agent Console app iframe through postMessage function.    * On receiving Click To Dial event, the script shows list of agents skills for user selection. When the user selects skill, message would be sent    * to Agent Console App to make outbound calls.    *    * This script should be loaded on all Salesforce pages as Home page Component.    *    */    (function ($) {        var IC_AGENT_CONSOLE_API = &apos;IC_AgentConsoleApi/&apos;,			currentMousePos = {},			skillListMenuPos = {},			clickedToDial = false,			clickToDialParam = null,			skillListMenu = null,			agentConsoleOrigin = &apos;&apos;,			masterSkillList = [],            comboxMenuHideTimeout = null;        function init() {            if (Sfdc !== null &amp;&amp; typeof Sfdc === &apos;object&apos; &amp;&amp; Sfdc.interaction !== null &amp;&amp; typeof Sfdc.interaction === &apos;object&apos;) {                skillListMenu = document.createElement(&apos;div&apos;);                skillListMenu.className = &apos;agentConsoleSkillListMenu&apos;;                skillListMenu.setAttribute(&apos;id&apos;, &apos;skillListMenu&apos;);                document.body.appendChild(skillListMenu);                skillListMenu.onmouseleave = comboxMenuHide;                skillListMenu.onmouseenter = function (a) { clearTimeout(comboxMenuHideTimeout); };                Sfdc.interaction.disableClickToDial();                Sfdc.interaction._onClickToDial = Sfdc.interaction.onClickToDial;                Sfdc.interaction.onClickToDial = function (a) {                    var param = Sfdc.Url.getUrlParameters(a),					result = {					    number: param.DN,					    objectId: param.ID,					    objectName: param.OBJECT_NAME,					    object: param.ENTITY_NAME					};                    onClickToDial(result);                    Sfdc.interaction._onClickToDial(a);                };                var url = parseUrl(document.getElementById(&apos;SoftphoneIframe&apos;).src);                agentConsoleOrigin = url.protocol + &apos;//&apos; + url.hostname + (url.port ? &apos;:&apos; + url.port : &apos;&apos;);                if (window.attachEvent) {                    window.attachEvent(&apos;onmessage&apos;, processPostMessage);                } else {                    window.addEventListener(&apos;message&apos;, processPostMessage, false);                }                document.onclick = onMouseClick;                document.onmousemove = onMouseMove;                window.onscroll = onScroll;                document.getElementById(&apos;clickToDial&apos;).parentNode.parentNode.style.display = &apos;none&apos;;            }        }        function parseUrl(url) {            var urlDom = document.createElement(&apos;a&apos;),                port;            urlDom.href = url;            /*IE10 the port number is being returned as part of host and port even for default ports*/            if (urlDom.protocol.toLowerCase() === &apos;http:&apos; &amp;&amp; urlDom.port == &apos;80&apos;) {                port = &apos;&apos;;            } else if (urlDom.protocol.toLowerCase() === &apos;https:&apos; &amp;&amp; urlDom.port == &apos;443&apos;) {                port = &apos;&apos;;            } else {                port = urlDom.port;            }            return {                protocol: urlDom.protocol,                host: urlDom.host,                hostname: urlDom.hostname,                port: port,                path: urlDom.pathname,                search: urlDom.search,                hash: urlDom.hash            };        }        function isApiMessage(event, apiEndPoint) {            return event.data &amp;&amp; event.data.indexOf(apiEndPoint) === 0;        }        function processPostMessage(event) {            var params,				message;            if (event.origin !== agentConsoleOrigin)                return;            try {                if (isApiMessage(event, IC_AGENT_CONSOLE_API)) {                    message = JSON.parse(event.data.replace(IC_AGENT_CONSOLE_API, &apos;&apos;));                    if (message.type === &apos;skillList&apos;) {                        loadSkillList(message.data);                    }                }            } catch (e) {                console.log(&quot;Failed to process API response.&quot;, e);            }        }        function postMessage(type, data) {            var message = IC_AGENT_CONSOLE_API + JSON.stringify({                &apos;type&apos;: type,                &apos;data&apos;: data            }),			iFrame = document.getElementById(&apos;SoftphoneIframe&apos;).contentWindow;            iFrame.postMessage(message, agentConsoleOrigin);        }        function loadSkillList(skillList) {            var i = 0,				menuItem;            /* Empty Skill List Menu */            while (skillListMenu.firstChild) {                skillListMenu.firstChild.onclick = undefined;                skillListMenu.removeChild(skillListMenu.firstChild);            }            if (skillList.length &gt; 0) {                masterSkillList = skillList;                for (i = 0; i &lt; skillList.length; i++) {                    menuItem = document.createElement(&apos;div&apos;);                    menuItem.appendChild(document.createTextNode(skillList[i].name));                    menuItem.className = &apos;menuItem&apos;;                    menuItem.setAttribute(&apos;data-skillId&apos;, skillList[i].id);                    menuItem.onclick = onSkillSelected;                    skillListMenu.appendChild(menuItem);                }                Sfdc.interaction.enableClickToDial();            } else {                Sfdc.interaction.disableClickToDial();            }        }        function onSkillSelected(e) {            var skillId = e.target.getAttribute(&apos;data-skillId&apos;);            postMessage(&apos;clickToDial&apos;, {                &apos;number&apos;: clickToDialParam.number,                &apos;skillId&apos;: skillId,                &apos;objectId&apos;: clickToDialParam.objectId,                &apos;objectName&apos;: clickToDialParam.objectName,                &apos;object&apos;: clickToDialParam.object            });            skillListMenu.style.display = &apos;none&apos;;        }        function onClickToDial(param) {            clickToDialParam = param;            skillListMenuPos.x = currentMousePos.x - 10;            skillListMenuPos.y = currentMousePos.y + 10;            if (masterSkillList.length === 1) {                postMessage(&apos;clickToDial&apos;, {                    &apos;number&apos;: clickToDialParam.number,                    &apos;skillId&apos;: masterSkillList[0].id,                    &apos;objectId&apos;: clickToDialParam.objectId,                    &apos;objectName&apos;: clickToDialParam.objectName,                    &apos;object&apos;: clickToDialParam.object                });            } else {                skillListMenu.style.display = &apos;block&apos;;                skillListMenu.style.top = skillListMenuPos.y + &apos;px&apos;;                skillListMenu.style.left = skillListMenuPos.x + &apos;px&apos;;                comboxFocusOut();            }            clickedToDial = true;        }        function browserCheck() {            var browser_detect = navigator.userAgent.toLowerCase(),                browserName = &quot;chrome&quot;;            if (browser_detect.indexOf(&quot;chrome&quot;) != -1) {                browserName = &quot;chrome&quot;;            } else if (browser_detect.indexOf(&quot;firefox&quot;) != -1) {                browserName = &quot;firefox&quot;;            } else if (browser_detect.indexOf(&quot;ie&quot;) != -1) {                browserName = &quot;ie&quot;;            }            return browserName;        }        function onMouseClick(event) {            var e = event || window.event,                target = e.target || e.srcElement,                mouseX = e.clientX + document.body.scrollLeft,                mouseY,                targetId = target.id,                parentId = target.parentElement.id;            if (browserCheck() === &quot;chrome&quot;) {                mouseY = (e.clientY + document.body.scrollTop) - window.pageYOffset;            } else if (browserCheck() === &quot;firefox&quot; || browserCheck() === &quot;ie&quot;) {                mouseY = (e.clientY + document.body.scrollTop);            }            /*var mouseX = event.clientX + document.body.scrollLeft,            mouseY = event.clientY + document.body.scrollTop,            targetId = event.target.id,            parentId = event.target.parentElement.id;*/            currentMousePos.x = mouseX;            currentMousePos.y = mouseY;            if (clickedToDial === false &amp;&amp; (targetId !== &apos;skillListMenu&apos; &amp;&amp; parentId !== &apos;skillListMenu&apos;) &amp;&amp; skillListMenu.style.display === &apos;block&apos;) {                skillListMenu.style.display = &apos;none&apos;;            }            clickedToDial = false;        }        function onMouseMove(event) {            var e = event || window.event,                mouseX = e.clientX + document.body.scrollLeft,				mouseY;            if (browserCheck() === &quot;chrome&quot;) {                mouseY = (e.clientY + document.body.scrollTop) - window.pageYOffset;            } else if (browserCheck() === &quot;firefox&quot; || browserCheck() === &quot;ie&quot;) {                mouseY = (e.clientY + document.body.scrollTop);            }            currentMousePos.x = mouseX;            currentMousePos.y = mouseY;        }        function onScroll() {            if (skillListMenu.style.display === &apos;block&apos;) {                skillListMenu.style.top = (skillListMenuPos.y - window.pageYOffset) + &apos;px&apos;;                skillListMenu.style.left = (skillListMenuPos.x - window.pageXOffset) + &apos;px&apos;;            }        }        function comboxMenuHide() {            if (skillListMenu.style.display === &apos;block&apos;) {                skillListMenu.style.display = &apos;none&apos;;            }        }        function comboxFocusOut() {            comboxMenuHideTimeout = setTimeout(function () {                comboxMenuHide();            }, 2000);        }        if (window.attachEvent) {            window.attachEvent(&apos;onload&apos;, init);        } else {            window.addEventListener(&apos;load&apos;, init, false);        }    } ());&lt;/script&gt;</body>
    <pageComponentType>htmlArea</pageComponentType>
    <width>narrow</width>
</HomePageComponent>
